name: PR Database Environment

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  setup:
    name: Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

  create_neon_branch:
    name: Create Neon Branch
    outputs:
      db_url: ${{ steps.create_neon_branch.outputs.connection_uri }}
      db_url_pooled: ${{ steps.create_neon_branch.outputs.pooled_connection_uri }}
    needs: setup
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          if [[ -z "${{ vars.NEON_PROJECT_ID }}" ]]; then
            echo "‚ùå NEON_PROJECT_ID variable not set"
            exit 1
          fi
          if [[ -z "${{ secrets.NEON_API_KEY }}" ]]; then
            echo "‚ùå NEON_API_KEY secret not set"
            exit 1
          fi
          echo "‚úÖ Required inputs validated"

      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v6
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
      
      - name: Debug Neon outputs
        run: |
          echo "üîç Neon action outputs:"
          echo "connection_uri exists: ${{ steps.create_neon_branch.outputs.connection_uri != '' }}"
          echo "pooled_connection_uri exists: ${{ steps.create_neon_branch.outputs.pooled_connection_uri != '' }}"
          echo "branch_id: ${{ steps.create_neon_branch.outputs.branch_id }}"
          echo "branch_name: ${{ steps.create_neon_branch.outputs.branch_name }}"
          echo "database_host: ${{ steps.create_neon_branch.outputs.database_host }}"
          echo "database_name: ${{ steps.create_neon_branch.outputs.database_name }}"


  migrate_database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: create_neon_branch
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Verify database connectivity
        run: |
          # Debug: Show the full DATABASE_URL (masking password)
          echo "üîç Raw DATABASE_URL: ${{ needs.create_neon_branch.outputs.db_url_pooled }}"
          DB_URL_DEBUG=$(echo '${{ needs.create_neon_branch.outputs.db_url_pooled }}' | sed 's/:\/\/[^:]*:[^@]*@/:\/\/***:***@/')
          echo "üîç Masked DATABASE_URL: $DB_URL_DEBUG"
          
          # Extract host from DATABASE_URL for connectivity check
          DB_HOST=$(echo '${{ needs.create_neon_branch.outputs.db_url_pooled }}' | sed -n 's/.*@\([^:/]*\).*/\1/p')
          echo "üîç Extracted DB_HOST: '$DB_HOST'"
          
          # Verify we have a host before proceeding
          if [[ -z "$DB_HOST" ]]; then
            echo "‚ùå Failed to extract database host from URL"
            echo "DATABASE_URL was: '${{ needs.create_neon_branch.outputs.db_url_pooled }}'"
            exit 1
          fi
          
          echo "üîç Testing connectivity to: $DB_HOST"
          
          # Simple connectivity test (timeout after 30 seconds)
          timeout 30 bash -c "until pg_isready -h $DB_HOST; do sleep 1; done"
          echo "‚úÖ Database connectivity verified"
        env:
          DATABASE_URL: ${{ needs.create_neon_branch.outputs.db_url_pooled }}

      - name: Run migrations
        run: |
          # Debug: Show environment variables (masking passwords)
          echo "üîç Environment check:"
          echo "DATABASE_URL set: $(if [[ -n "$DATABASE_URL" ]]; then echo "‚úÖ Yes"; else echo "‚ùå No"; fi)"
          echo "DATABASE_URL_UNPOOLED set: $(if [[ -n "$DATABASE_URL_UNPOOLED" ]]; then echo "‚úÖ Yes"; else echo "‚ùå No"; fi)"
          
          # Run migrations on the PR branch database
          echo "üöÄ Running database migrations..."
          pnpm db:migrate
          echo "‚úÖ Migrations completed successfully"
        env:
          DATABASE_URL: ${{ needs.create_neon_branch.outputs.db_url_pooled }}
          DATABASE_URL_UNPOOLED: ${{ needs.create_neon_branch.outputs.db_url }}

  test_pr_branch:
    name: Test Against PR Database
    needs: [create_neon_branch, migrate_database]
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    uses: ./.github/workflows/test.yml
    with:
      database_url: ${{ needs.create_neon_branch.outputs.db_url_pooled }}
      database_url_unpooled: ${{ needs.create_neon_branch.outputs.db_url }}

  schema_diff:
    name: Post Schema Diff Comment
    runs-on: ubuntu-latest
    needs: [setup, migrate_database]
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    steps:
      - name: Post Schema Diff Comment to PR
        uses: neondatabase/schema-diff-action@v1
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          compare_branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

  cleanup_on_failure:
    name: Emergency Cleanup
    runs-on: ubuntu-latest
    needs: [setup, create_neon_branch]
    if: always() && (failure() || cancelled()) && needs.create_neon_branch.result == 'success'
    steps:
      - name: Delete orphaned branch
        uses: neondatabase/delete-branch-action@v3
        continue-on-error: true
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

  delete_neon_branch:
    name: Delete Neon Branch
    needs: setup
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
