name: Deploy to Staging

on:
  push:
    branches: [development, staging]
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  NODE_ENV: staging
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Quick checks for staging deployment
  pre-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      deployment-type: ${{ steps.check.outputs.deployment-type }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Determine deployment type
        id: check
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "deployment-type=preview" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "staging" ] || [ "${{ github.ref_name }}" == "development" ]; then
            echo "deployment-type=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deployment-type=none" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Quick lint check
        if: steps.check.outputs.should-deploy == 'true'
        run: pnpm check

      - name: Type check
        if: steps.check.outputs.should-deploy == 'true'
        run: pnpm typecheck

  # Run tests for staging
  test:
    name: Test Suite
    needs: pre-checks
    runs-on: ubuntu-latest
    if: needs.pre-checks.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run tests with test database
        uses: ./.github/workflows/test.yml@main
        with:
          database_url: ${{ secrets.STAGING_DATABASE_URL }}
          database_url_unpooled: ${{ secrets.STAGING_DATABASE_URL_UNPOOLED }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    needs: [pre-checks, test]
    runs-on: ubuntu-latest
    if: needs.pre-checks.outputs.should-deploy == 'true' && needs.test.result == 'success'
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run staging migrations
        if: needs.pre-checks.outputs.deployment-type == 'staging'
        env:
          STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          STAGING_DATABASE_URL_UNPOOLED: ${{ secrets.STAGING_DATABASE_URL_UNPOOLED }}
        run: |
          echo "Running staging migrations..."
          pnpm db:migrate:staging

      - name: Build application
        env:
          # Staging environment variables
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.STAGING_NEXT_PUBLIC_STACK_PROJECT_ID }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.STAGING_NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
          STACK_SECRET_SERVER_KEY: ${{ secrets.STAGING_STACK_SECRET_SERVER_KEY }}
          # Enable additional features in staging
          FEATURE_EXPERIMENTAL_UI: true
          FEATURE_DEBUG_MODE: true
          FEATURE_TESTING_TOOLS: true
        run: pnpm build

      - name: Deploy to Vercel
        id: deploy
        uses: vercel/action@v5
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ needs.pre-checks.outputs.deployment-type == 'staging' && '--prebuilt' || '--prebuilt' }}

  # Staging smoke tests
  smoke-tests:
    name: Staging Smoke Tests
    needs: [pre-checks, deploy-staging]
    runs-on: ubuntu-latest
    if: needs.deploy-staging.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Wait for deployment
        run: sleep 30

      - name: Smoke test - Health check
        run: |
          echo "Testing health endpoint..."
          for i in {1..3}; do
            response=$(curl -s -w "%{http_code}" "${{ needs.deploy-staging.outputs.deployment-url }}/api/health" -o /tmp/health.json || echo "000")
            if [ "$response" == "200" ]; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚ùå Health check failed (attempt $i/3): $response"
              if [ $i -eq 3 ]; then
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Smoke test - Feature flags
        run: |
          echo "Testing feature flags..."
          response=$(curl -s -w "%{http_code}" "${{ needs.deploy-staging.outputs.deployment-url }}/api/feature-flags" -o /tmp/flags.json || echo "000")
          if [ "$response" == "200" ]; then
            echo "‚úÖ Feature flags working"
            echo "Staging features:"
            cat /tmp/flags.json | jq -r '.flags | to_entries[] | select(.value == true) | .key' || true
          else
            echo "‚ùå Feature flags failed: $response"
            exit 1
          fi

      - name: Smoke test - Database connectivity
        run: |
          echo "Testing database connectivity via API..."
          # Test that we can reach a protected endpoint (should redirect to auth or return data)
          response=$(curl -s -w "%{http_code}" "${{ needs.deploy-staging.outputs.deployment-url }}/api/health?type=detailed" -o /tmp/db-test.json || echo "000")
          if [ "$response" == "200" ] || [ "$response" == "206" ]; then
            echo "‚úÖ Database connectivity test passed"
          else
            echo "‚ùå Database connectivity test failed: $response"
            cat /tmp/db-test.json || true
            exit 1
          fi

      - name: Install Playwright for E2E smoke tests
        run: pnpm playwright install chromium

      - name: Run critical path E2E tests
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-staging.outputs.deployment-url }}
        run: |
          # Run only critical smoke tests (not full E2E suite)
          pnpm playwright test tests/e2e/smoke --reporter=list --max-failures=3
        continue-on-error: true # Don't fail deployment for E2E issues in staging

  # Update PR with deployment info
  pr-comment:
    name: Update PR Comment
    needs: [pre-checks, deploy-staging, smoke-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.deploy-staging.result == 'success'
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ needs.deploy-staging.outputs.deployment-url }}';
            const smokeTestResult = '${{ needs.smoke-tests.result }}';
            
            const body = `## üöÄ Staging Deployment Ready
            
            **Preview URL**: ${deploymentUrl}
            **Smoke Tests**: ${smokeTestResult === 'success' ? '‚úÖ Passed' : '‚ö†Ô∏è Some issues detected'}
            **Commit**: ${{ github.sha }}
            
            ### Quick Links
            - [üè† Preview Site](${deploymentUrl})
            - [‚ù§Ô∏è Health Check](${deploymentUrl}/api/health)
            - [üéõÔ∏è Feature Flags](${deploymentUrl}/api/feature-flags)
            
            ### Testing Notes
            - Staging has experimental features enabled
            - Debug mode is available for testing
            - Test data may be available depending on environment
            
            ---
            *Deployed via GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Cleanup and notifications
  cleanup:
    name: Cleanup
    needs: [pre-checks, deploy-staging, smoke-tests]
    runs-on: ubuntu-latest
    if: always() && needs.pre-checks.outputs.should-deploy == 'true'
    
    steps:
      - name: Deployment summary
        run: |
          echo "## Staging Deployment Summary"
          echo "**Type**: ${{ needs.pre-checks.outputs.deployment-type }}"
          echo "**Deploy Status**: ${{ needs.deploy-staging.result }}"
          echo "**Smoke Tests**: ${{ needs.smoke-tests.result }}"
          echo "**URL**: ${{ needs.deploy-staging.outputs.deployment-url }}"
          
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment completed successfully"
          else
            echo "‚ùå Staging deployment failed - check logs above"
          fi