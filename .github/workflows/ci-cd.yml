name: CI/CD Pipeline

on:
  push:
    branches: [main, master, development]
  pull_request:
    branches: [main, master, development]
  workflow_dispatch:

permissions:
  contents: read

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.14.0'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Code quality checks - run in parallel
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Turbo build outputs
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            node_modules/.cache
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run type checking
        run: pnpm typecheck
        continue-on-error: true

      - name: Run linting
        run: pnpm lint

      - name: Check code formatting
        run: pnpm check

  # Build verification - uses cache from quality
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: read
    strategy:
      matrix:
        node: ['20', '22']
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: ${{ matrix.node }}

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .turbo
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-

      - name: Build project
        env:
          NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID || 'test-stack-project-id' }}
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY || 'test-stack-client-key' }}
          STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY || 'test-stack-server-key' }}
        run: pnpm build

      - name: Upload build artifacts
        if: matrix.node == '20'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            !.next/cache
          retention-days: 7

      - name: Analyze bundle size
        if: matrix.node == '20'
        run: |
          npx -y @next/bundle-analyzer@latest analyze

  # Test execution - parallel matrix
  test:
    name: Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration']
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vetmed_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache test results
        uses: actions/cache@v4
        with:
          path: |
            coverage/
            .vitest/
          key: ${{ runner.os }}-test-${{ matrix.test-type }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-test-${{ matrix.test-type }}-

      - name: Setup test database
        if: matrix.test-type == 'integration'
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: vetmed_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: postgres
        run: |
          pnpm db:test:init || true
          pnpm db:test:seed || true

      - name: Run ${{ matrix.test-type }} tests
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: vetmed_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379
        run: pnpm test:${{ matrix.test-type }}
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # E2E tests - browser matrix
  e2e:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        browser: ['chromium', 'firefox', 'webkit']
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next/

      - name: Run E2E tests
        env:
          NEXT_PUBLIC_STACK_PROJECT_ID: test-stack-project-id
          NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: test-stack-client-key
          STACK_SECRET_SERVER_KEY: test-stack-server-key
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          BROWSER: ${{ matrix.browser }}
        run: pnpm test:e2e --project=${{ matrix.browser }}
        continue-on-error: true

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  # Security scanning - only on PRs
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache security scan results
        uses: actions/cache@v4
        with:
          path: |
            .snyk/
          key: ${{ runner.os }}-security-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-security-

      - name: Run dependency audit
        run: pnpm audit --production
        continue-on-error: true

      - name: Run security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Analyze with CodeQL
        uses: github/codeql-action/analyze@v3

  # Summary job - waits for all tests
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, build, test, e2e, security]
    permissions:
      contents: read
    steps:
      - name: Check results
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job results
          if [[ "${{ needs.quality.result }}" == "success" ]]; then
            echo "✅ Code Quality: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Tests: Some failures" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.e2e.result }}" == "success" ]]; then
            echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ E2E Tests: Some failures" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.security.result }}" == "success" ]] || [[ "${{ needs.security.result }}" == "skipped" ]]; then
            echo "✅ Security: No critical issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security: Review needed" >> $GITHUB_STEP_SUMMARY
          fi

